#!/usr/bin/env python3
import streamlit as st
from PIL import Image, ImageEnhance, ImageFilter
import numpy as np
import imagehash
import cv2
from skimage.metrics import structural_similarity as ssim
import torch
import torchvision.models as models
import torchvision.transforms as T
import torch.nn.functional as F
import io
import random
import zipfile
from io import BytesIO

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
st.set_page_config(page_title="üñºÔ∏è Image Unique & Compare Tool", layout="wide")
st.title("üñºÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")


# --- –§—É–Ω–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ---
def make_unique(img, intensity=0.5):
    import random, io
    from PIL import Image, ImageEnhance, ImageFilter
    import numpy as np

    try:
        # --- 1. –õ—ë–≥–∫–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
        angle = random.uniform(-3, 3) * intensity  # üîπ –º—è–≥–∫–∏–π –Ω–∞–∫–ª–æ–Ω
        scale = random.uniform(0.9, 1.1)
        img = img.rotate(angle, expand=True)
        w, h = img.size
        img = img.resize((int(w * scale), int(h * scale)))

        # --- 2. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—Å–µ–≥–¥–∞) ---
        img = img.transpose(Image.FLIP_LEFT_RIGHT)

        # --- 3. –¶–≤–µ—Ç–æ–≤—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è ---
        img = ImageEnhance.Color(img).enhance(random.uniform(0.8, 1.2))
        img = ImageEnhance.Contrast(img).enhance(random.uniform(0.85, 1.15))
        img = ImageEnhance.Brightness(img).enhance(random.uniform(0.9, 1.1))
        img = ImageEnhance.Sharpness(img).enhance(random.uniform(0.9, 1.3))

        # --- 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—à—É–º–æ–≤ ---
        np_img = np.array(img).astype(np.int16)
        noise_strength = int(15 * intensity)
        noise = np.random.randint(-noise_strength, noise_strength + 1, np_img.shape)
        np_img = np.clip(np_img + noise, 0, 255).astype(np.uint8)
        img = Image.fromarray(np_img)

        # --- 5. –ù–µ–±–æ–ª—å—à–æ–π HSV-—Å–¥–≤–∏–≥ ---
        hsv = np.array(img.convert("HSV"))
        hsv[..., 0] = (hsv[..., 0] + random.randint(-10, 10)) % 255
        hsv[..., 1] = np.clip(hsv[..., 1] * random.uniform(0.9, 1.1), 0, 255)
        img = Image.fromarray(hsv, "HSV").convert("RGB")

        # --- 6. –õ—ë–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ (–∏–Ω–æ–≥–¥–∞) ---
        if random.random() < 0.4:
            img = img.filter(ImageFilter.GaussianBlur(radius=random.uniform(0.2, 0.6)))

        # --- 6.5. –°–ª—É—á–∞–π–Ω–æ–µ –ª—ë–≥–∫–æ–µ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ---
        if random.random() < 0.6:
            w, h = img.size
            crop_x = random.randint(5, int(0.03 * w))
            crop_y = random.randint(5, int(0.03 * h))
            img = img.crop((crop_x, crop_y, w - crop_x, h - crop_y))

        # --- 7. –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ EXIF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ---
        exif_bytes = b"Exif\0\0" + bytes(
            [random.randint(0, 255) for _ in range(24, 48)]
        )

        # --- 8. –°–∂–∞—Ç–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ---
        output = io.BytesIO()
        format_choice = random.choice(["JPEG", "WEBP"])
        quality = random.randint(65, 80)
        img.save(
            output,
            format=format_choice,
            quality=quality,
            exif=exif_bytes,
            optimize=True,
        )
        file_bytes = bytearray(output.getvalue())

        # --- 9. –ù–µ–±–æ–ª—å—à–æ–π —Ö–≤–æ—Å—Ç –±–∞–π—Ç–æ–≤ ---
        tail_len = random.randint(8, 32)
        file_bytes.extend(bytes([random.randint(0, 255) for _ in range(tail_len)]))

        # --- 10. –í–æ–∑–≤—Ä–∞—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
        final_img = Image.open(io.BytesIO(file_bytes))
        return final_img

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return img


# --- –ú–µ—Ç–æ–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---
def phash_distance(img1, img2):
    try:
        return imagehash.phash(img1) - imagehash.phash(img2)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ pHash: {e}")
        return None


def ssim_score(img1, img2):
    try:
        i1 = cv2.cvtColor(np.array(img1), cv2.COLOR_RGB2GRAY)
        i2 = cv2.cvtColor(np.array(img2), cv2.COLOR_RGB2GRAY)
        h = min(i1.shape[0], i2.shape[0])
        w = min(i1.shape[1], i2.shape[1])
        i1 = cv2.resize(i1, (w, h))
        i2 = cv2.resize(i2, (w, h))
        score, _ = ssim(i1, i2, full=True)
        return score
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ SSIM: {e}")
        return None


@st.cache_resource
def load_resnet():
    model = models.resnet18(weights=models.ResNet18_Weights.DEFAULT)
    model.eval()
    preprocess = T.Compose(
        [
            T.Resize((224, 224)),
            T.ToTensor(),
            T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
        ]
    )
    return model, preprocess


def resnet_similarity(img1, img2):
    try:
        model, preprocess = load_resnet()
        with torch.no_grad():
            t1 = preprocess(img1).unsqueeze(0)
            t2 = preprocess(img2).unsqueeze(0)
            f1 = model(t1)
            f2 = model(t2)
            similarity = F.cosine_similarity(f1, f2).item()
        return similarity
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ ResNet: {e}")
        return None


# --- –í–∫–ª–∞–¥–∫–∏ ---
tab1, tab2 = st.tabs(["üé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è", "üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ"])

# ---------- –í–∫–ª–∞–¥–∫–∞ 1: –£–ù–ò–ö–ê–õ–ò–ó–ê–¶–ò–Ø ----------
# ---------- –í–∫–ª–∞–¥–∫–∞ 1: –£–ù–ò–ö–ê–õ–ò–ó–ê–¶–ò–Ø ----------
with tab1:
    st.header("üé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    uploaded_images = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=True,
        key="unique_upload",
    )

    intensity = st.slider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π", 0.0, 0.5, 0.2, 0.05)

    if uploaded_images:
        st.write(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_images)}")

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
        cols = st.columns(min(3, len(uploaded_images)))
        for idx, img_file in enumerate(uploaded_images):
            with cols[idx % len(cols)]:
                img = Image.open(img_file)
                st.image(img, caption=f"–û—Ä–∏–≥–∏–Ω–∞–ª {idx+1}", use_container_width=True)

        num_copies = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            min_value=1,
            max_value=10,
            value=1,
        )

        if st.button("‚ú® –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ"):
            st.info("üîÑ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

            zip_buffer = BytesIO()
            phash_all = []

            with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
                for idx, img_file in enumerate(uploaded_images):
                    img = Image.open(img_file).convert("RGB")
                    st.write(f"üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx + 1}: {img_file.name}")

                    phash_for_this_image = []  # —Ö—Ä–∞–Ω–∏–º –≤—Å–µ pHash —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞

                    for copy_idx in range(num_copies):
                        attempt = 0
                        while True:
                            attempt += 1
                            unique_img = make_unique(img, intensity)
                            new_phash = imagehash.phash(unique_img)

                            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ—Ö –∫–æ–ø–∏–π —ç—Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
                            if (
                                all(
                                    abs(new_phash - prev_ph) > 10
                                    for prev_ph in phash_for_this_image
                                )
                                or attempt > 5
                            ):
                                break

                        phash_for_this_image.append(new_phash)
                        phash_all.append(new_phash)

                        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é
                        img_bytes = BytesIO()
                        unique_img.save(img_bytes, format="PNG")
                        zipf.writestr(
                            f"unique_{idx+1}_copy_{copy_idx+1}.png",
                            img_bytes.getvalue(),
                        )

                        st.write(
                            f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx+1}, –∫–æ–ø–∏—è {copy_idx+1} –≥–æ—Ç–æ–≤–∞ (–ø–æ–ø—ã—Ç–æ–∫: {attempt})"
                        )

            zip_buffer.seek(0)

            st.success(
                "üéâ –í—Å–µ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö!"
            )
            st.download_button(
                "üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (ZIP)",
                data=zip_buffer,
                file_name="unique_images.zip",
                mime="application/zip",
            )


# ---------- –í–∫–ª–∞–¥–∫–∞ 2: –°–†–ê–í–ù–ï–ù–ò–ï ----------
with tab2:
    st.header("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    col1, col2 = st.columns(2)
    with col1:
        img1_file = st.file_uploader(
            "–ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"], key="img1_upload"
        )
    with col2:
        img2_file = st.file_uploader(
            "–í—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"], key="img2_upload"
        )

    if not img1_file and not img2_file:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

    if img1_file and img2_file:
        img1 = Image.open(img1_file).convert("RGB")
        img2 = Image.open(img2_file).convert("RGB")

        st.image(
            [img1, img2],
            caption=["–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2"],
            use_container_width=True,
        )

        if st.button("üîé –°—Ä–∞–≤–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

            ph = phash_distance(img1, img2)
            ss = ssim_score(img1, img2)
            rs = resnet_similarity(img1, img2)

            if ph is not None:
                st.write(f"**–†–∞–∑–Ω–∏—Ü–∞ pHash:** {ph}")
            if ss is not None:
                st.write(f"**SSIM:** {ss:.4f}")
            if rs is not None:
                st.write(f"**ResNet —Å—Ö–æ–¥—Å—Ç–≤–æ:** {rs:.4f}")

            if all(v is not None for v in [ph, ss, rs]):
                if ph > 10 and ss < 0.7 and rs < 0.85:
                    st.success("üü¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã (—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è)")
                    unique_score = int(
                        ((ph / 64) * 0.4 + (1 - ss) * 0.3 + (1 - rs) * 0.3) * 100
                    )
                    st.progress(min(unique_score, 100))
                    st.write(f"**–û—Ü–µ–Ω–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:** {unique_score}%")
                else:
                    st.warning("üî¥ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–ª–∏—á–∏–π)")
                    sim_score = int(((1 - (ph / 64)) * 0.4 + ss * 0.3 + rs * 0.3) * 100)
                    st.progress(min(sim_score, 100))
                    st.write(f"**–û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞:** {sim_score}%")

st.markdown("---")
st.caption("¬© –ù—É —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å - —Ö—É–π")
